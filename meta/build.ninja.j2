ninja_required_version = 1.7
builddir = meta/

rule self
  description = generate build definitions
  command = ./configure --quiet
  generator = true

rule rgbasm
  description = assemble $out
## if rgbasm_version < (0, 6, 0)
  command = rgbasm $defs -Weverything -Werror -E -o $out $in
## else
  command = rgbasm $defs -H -l -Weverything -Werror -E -o $out $in
## endif

rule rgblink
  description = link $out
  command = rgblink --tiny --wramx --sym $symbols --map $map -o $out $in

rule rgbfix
  description = adjust checksums $out
  command = cp $in $out && rgbfix -f hg -p 255 $out

rule rgbgfx
  description = format image for gameboy $out
  command = rgbgfx -o $out $in

rule restrict_colors
  description = restrict image to colors in $palette
  command = convert $in +dither -remap $palette $out

rule fix_white_foreground
  description = correct image with white foreground $out
  command = convert $in -fuzz 2% -fill "#eeeeee" -opaque white -background white -alpha remove $out

rule fix_width
  description = quantize image width $out to $width
  command = convert $in -sample $width $out

rule spritesheet
  description = convert animated sprite $in into spritesheet $out, where each tile in a row is a frame of the animation for one tile
  command = meta/.venv/bin/python meta/spritesheet.py --width $width --output $out $in

rule offset
  description = add $add to each byte of $in
  command = meta/.venv/bin/python meta/offset.py --add $add --output $out $in

rule stack
  description = stack images on top of each other
  command = convert $in -append $out

rule count_frames
  description = count frames of animation $out
  command = printf '\x'"$$(printf '%02d\n' "$$(identify -format '%n\n' $in | head -n 1)")" > $out

rule rgbgfx_background
  description = extract unique tiles from background image $out
  command = rgbgfx --unique-tiles --tilemap $tilemap --output $out $in

rule rgbgfx_sprite
  description = extract unique and mirrored tiles from sprite image $out
  command = rgbgfx --mirror-tiles --tilemap $tilemap --attr-map $attrmap --output $out $in

rule rgbasm_deps
  description = list files included when building this file (using sed) $out
  command = sed -n 's/^\([^;]*\s\)\?inc\(lude\|bin\) "\([^"]*\)".*$$/\3/p' $in > $out

# FIXME: rgbasm this crashes after the first one
#rule rgbasm_deps
#  description = list files included when building this file (using rgbasm, but this crashes after the first one)
#  command = rgbasm -M $out -MT '' -MG $in

rule deps2dd
  description = convert Make dependency syntax into ninja dyndep syntax $out
  command = printf "ninja_dyndep_version = 1\nbuild %s: dyndep | %s\n" $target "$$(< $in cut -d':' -f2 | xargs)" > $out

build | build.ninja: self | meta/build.ninja.j2 meta/jinja2_render.py meta/Pipfile configure

## for f in inner_glob('src/*.asm')
## for platform in ['gb', 'pocket']
build obj/{{ f }}.{{ platform }}.deps: rgbasm_deps src/{{ f }}.asm
build obj/{{ f }}.{{ platform }}.dd: deps2dd obj/{{ f }}.{{ platform }}.deps
  target = obj/{{ f }}.{{ platform }}.o

build obj/{{ f }}.{{ platform }}.o: rgbasm src/{{ f }}.asm || obj/{{ f }}.{{ platform }}.dd
## if platform == 'pocket'
  defs = -D ANALOGUE_POCKET
## endif
  dyndep = obj/{{ f }}.{{ platform }}.dd
## endfor
## endfor

## for f in inner_glob('art/*_wfg.png')
build obj/{{ f }}_4col_wfg.png: restrict_colors art/{{ f }}_wfg.png | art/bg_palette.png
  palette = art/bg_palette.png
build obj/{{ f }}_4col.png: fix_white_foreground art/{{ f }}_4col_wfg.png
build obj/{{ f }}.2bpp: rgbgfx obj/{{ f }}_4col.png
## endfor

build obj/cat_3col_sprite.png: stack obj/southward_3col_sprite.png
# TODO add obj/westward_3col_sprite.png obj/eastward_3col_sprite.png obj/northward_3col_sprite.png
## for f in ["cat"]
build obj/{{ f }}.2bpp | obj/{{ f }}.tilemap obj/{{ f }}.attrmap: rgbgfx_sprite obj/{{ f }}_3col_sprite.png
  tilemap = obj/{{ f }}.tilemap
  attrmap = obj/{{ f }}.attrmap
build obj/cat_offset_170.tilemap: offset obj/cat.tilemap
  add = 170
## endfor

## for f in inner_glob('art/*_sprite_wfg_to16.gif')
build obj/{{ f }}_sprite_wfg_to16.png: spritesheet art/{{ f }}_sprite_wfg_to16.gif | meta/spritesheet.py meta/Pipfile
  width = 2
build obj/{{ f }}_sprite_wfg.png: fix_width obj/{{ f }}_sprite_wfg_to16.png
  width = 32
build obj/{{ f }}_3col_sprite_wfg.png: restrict_colors obj/{{ f }}_sprite_wfg.png | art/sprite_palette.png
  palette = art/sprite_palette.png
build obj/{{ f }}_3col_sprite.png: fix_white_foreground obj/{{ f }}_3col_sprite_wfg.png
build obj/{{ f }}.2bpp | obj/{{ f }}.tilemap obj/{{ f }}.attrmap: rgbgfx_sprite obj/{{ f }}_3col_sprite.png
  tilemap = obj/{{ f }}.tilemap
  attrmap = obj/{{ f }}.attrmap
## endfor

## for f in inner_glob('art/*_bg.png')
build obj/{{ f }}_4col_bg.png: restrict_colors art/{{ f }}_bg.png | art/bg_palette.png
  palette = art/bg_palette.png
build obj/{{ f }}.2bpp | obj/{{ f }}.tilemap: rgbgfx_background obj/{{ f }}_4col_bg.png
  tilemap = obj/{{ f }}.tilemap
## endfor

## for f in inner_glob('art/*.png')
build obj/{{ f }}_4col.png: restrict_colors art/{{ f }}.png | art/bg_palette.png
  palette = art/bg_palette.png
build obj/{{ f }}.2bpp: rgbgfx obj/{{ f }}_4col.png
## endfor

## for platform in ['gb', 'pocket']
## for target in ["main", "test"]
build obj/{{ target }}.raw.{{ platform }} | obj/{{ target }}.{{ platform }}.sym obj/{{ target }}.{{ platform }}.map: rgblink $
    obj/bg.{{ platform }}.o $
    obj/dma.{{ platform }}.o $
    obj/input.{{ platform }}.o $
    obj/interrupts.{{ platform }}.o $
    obj/memory.{{ platform }}.o $
    obj/music.{{ platform }}.o $
    obj/smt.{{ platform }}.o $
    obj/sprites.{{ platform }}.o $
    obj/tiles.{{ platform }}.o $
    obj/begin_{{ target }}.{{ platform }}.o $
    obj/main.{{ platform }}.o
  symbols = obj/{{ target }}.{{ platform }}.sym
  map = obj/{{ target }}.{{ platform }}.map

build obj/{{ target }}.{{ platform }}: rgbfix obj/{{ target }}.raw.{{ platform }}
## endfor
## endfor

default obj/main.gb

# vi: set syntax=ninja ts=2 sts=2 sw=2 et:

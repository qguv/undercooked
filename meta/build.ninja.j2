ninja_required_version = 1.7
builddir = obj/

rule self
  description = generate build definitions
  command = ./configure --quiet
  generator = true

rule rgbasm
  description = assemble $out
  command = rgbasm -E -o $out $in

rule rgblink
  description = link $out
  command = rgblink --tiny --wramx -n $symbols -o $out $in

rule rgbfix
  description = adjust checksums $out
  command = cp $in $out && rgbfix --validate -p 255 $out

rule rgbgfx
  description = format image for gameboy $out
  command = rgbgfx -o $out $in

rule restrict_colors
  description = restrict image to colors in $palette
  command = convert $in +dither -remap $palette $out

rule fix_white_foreground
  description = correct image with white foreground $out
  command = convert $in -fuzz 2% -fill "#eeeeee" -opaque white -background white -alpha remove $out

rule fix_width
  description = quantize image width $out
  command = convert $in -sample 16 $out

rule stack_frames
  description = vertically stack animation frames into a flat image $out
  command = convert -coalesce $in -append $out

rule count_frames
  description = count frames of animation $out
  command = printf '\x'"$$(printf '%02d\n' "$$(identify -format '%n\n' $in | head -n 1)")" > $out

rule rgbgfx_background
  description = extract unique tiles from background image $out
  command = rgbgfx --unique-tiles --tilemap $tilemap --output $out $in

rule rgbgfx_sprite
  description = extract unique and mirrored tiles from sprite image $out
  command = rgbgfx --mirror-tiles --tilemap $tilemap --attr-map $attrmap --output $out $in

rule rgbasm_deps
  description = list files included when building this file (using sed) $out
  command = sed -n 's/^\([^;]*\s\)\?inc\(lude\|bin\) "\([^"]*\)".*$$/\3/p' $in > $out

# FIXME: rgbasm this crashes after the first one
#rule rgbasm_deps
#  description = list files included when building this file (using rgbasm, but this crashes after the first one)
#  command = rgbasm -M $out -MT '' -MG $in

rule deps2dd
  description = convert Make dependency syntax into ninja dyndep syntax $out
  command = printf "ninja_dyndep_version = 1\nbuild %s: dyndep | %s\n" $target "$$(< $in cut -d':' -f2 | xargs)" > $out

build | build.ninja: self | meta/build.ninja.j2 configure

## for f in inner_glob('src/*.asm')
build obj/{{ f }}.deps: rgbasm_deps src/{{ f }}.asm
build obj/{{ f }}.dd: deps2dd obj/{{ f }}.deps
  target = obj/{{ f }}.o

build obj/{{ f }}.o: rgbasm src/{{ f }}.asm || obj/{{ f }}.dd
  dyndep = obj/{{ f }}.dd
## endfor

## for f in inner_glob('art/*_wfg.png')
build obj/{{ f }}_4col_wfg.png: restrict_colors art/{{ f }}_wfg.png | art/bg_palette.png
  palette = art/bg_palette.png
build obj/{{ f }}_4col.png: fix_white_foreground art/{{ f }}_4col_wfg.png
build obj/{{ f }}.2bpp: rgbgfx obj/{{ f }}_4col.png
## endfor

## for f in inner_glob('art/*_sprite_wfg_to16.gif')
build obj/{{ f }}_sprite_wfg_to16.png: stack_frames art/{{ f }}_sprite_wfg_to16.gif
build obj/{{ f }}_sprite_wfg.png: fix_width obj/{{ f }}_sprite_wfg_to16.png
build obj/{{ f }}_3col_sprite_wfg.png: restrict_colors obj/{{ f }}_sprite_wfg.png | art/sprite_palette.png
  palette = art/sprite_palette.png
build obj/{{ f }}_3col_sprite.png: fix_white_foreground obj/{{ f }}_3col_sprite_wfg.png
build obj/{{ f }}.2bpp | obj/{{ f }}.tilemap obj/{{ f }}.attrmap: rgbgfx_sprite obj/{{ f }}_3col_sprite.png
  tilemap = obj/{{ f }}.tilemap
  attrmap = obj/{{ f }}.attrmap
## endfor

## for f in inner_glob('art/*_bg.png')
build obj/{{ f }}_4col_bg.png: restrict_colors art/{{ f }}_bg.png | art/bg_palette.png
  palette = art/bg_palette.png
build obj/{{ f }}.2bpp | obj/{{ f }}.tilemap: rgbgfx_background obj/{{ f }}_4col_bg.png
  tilemap = obj/{{ f }}.tilemap
## endfor

## for f in inner_glob('art/*.png')
build obj/{{ f }}_4col.png: restrict_colors art/{{ f }}.png | art/bg_palette.png
  palette = art/bg_palette.png
build obj/{{ f }}.2bpp: rgbgfx obj/{{ f }}_4col.png
## endfor

build obj/main.raw.gb | obj/main.sym: rgblink $
    obj/bg.o $
    obj/input.o $
    obj/interrupts.o $
    obj/memory.o $
    obj/music.o $
    obj/smt.o $
    obj/sprites.o $
    obj/tiles.o $
    obj/main.o
  symbols = obj/main.sym

build obj/main.gb: rgbfix obj/main.raw.gb

default obj/main.gb

# vi: set syntax=ninja ts=2 sts=2 sw=2 et:

ninja_required_version = 1.7

rule self
  command = ./configure --quiet
  generator = true

rule rgbasm
  command = rgbasm -v -E -o $out $in

rule rgblink_rgbfix
  command = rgblink -n $prefix.sym -o $prefix.gb $in && rgbfix -v -p 0 $prefix.gb

rule rgbgfx
  description = format image for gameboy
  command = rgbgfx -o $out $in

rule fix_white_foreground
  description = correct image with white foreground
  command = convert $in -fuzz 2% -fill "#eeeeee" -opaque white -background white -alpha remove $out

rule fix_width
  description = quantize image width
  command = convert $in -sample 16 $out

rule stack_frames
  description = vertically stack animation frames into a flat image
  command = convert -coalesce $in -append $out

rule count_frames
  description = count frames of animation
  command = printf '\x'"$$(printf '%02d\n' "$$(identify -format '%n\n' $in | head -n 1)")" > $out

rule rgbgfx_background
  description = extract unique tiles from background image
  command = rgbgfx --unique-tiles --tilemap $prefix.tilemap --output $prefix.2bpp $in

rule rgbgfx_sprite
  description = extract unique and mirrored tiles from sprite image
  command = rgbgfx --mirror-tiles --tilemap $prefix.tilemap --attr-map $prefix.attrmap --output $prefix.2bpp $in

rule rgbasm_deps_simple
  description = list files included when building this file (using sed)
  command = sed -n 's/^.*inc\(lude\|bin\) "\([^"]*\)".*$$/\2/p' $in > $out

rule rgbasm_deps
  description = list files included when building this file (using rgbasm, but this crashes after the first one)
  command = rgbasm -M $out -MT '' -MG $in

rule deps2dd
  description = convert Make dependency syntax into ninja dyndep syntax
  command = printf "ninja_dyndep_version = 1\nbuild %s: dyndep | %s\n" $target "$$(< $in cut -d':' -f2 | xargs)" > $out

build | build.ninja: self | meta/build.ninja.j2 configure

## for f in inner_glob('src/*.asm')
build obj/{{ f }}.deps: rgbasm_deps_simple src/{{ f }}.asm
build obj/{{ f }}.dd: deps2dd obj/{{ f }}.deps
  target = obj/{{ f }}.o

build obj/{{ f }}.o: rgbasm src/{{ f }}.asm || obj/{{ f }}.dd
  dyndep = obj/{{ f }}.dd

build obj/{{ f }}.gb obj/{{ f }}.sym: rgblink_rgbfix obj/{{ f }}.o
  prefix = obj/{{ f }}
## endfor

## for f in inner_glob('art/*_wfg.png')
build obj/{{ f }}.png: fix_white_foreground art/{{ f }}_wfg.png
build obj/{{ f }}.2bpp: rgbgfx obj/{{ f }}.png
## endfor

## for f in inner_glob('art/*_sprite_wfg_to16.gif')
build obj/{{ f }}_sprite_wfg_to16.png: stack_frames art/{{ f }}_sprite_wfg_to16.gif
build obj/{{ f }}_sprite_wfg.png: fix_width obj/{{ f }}_sprite_wfg_to16.png
build obj/{{ f }}_sprite.png: fix_white_foreground obj/{{ f }}_sprite_wfg.png
build obj/{{ f }}.2bpp obj/{{ f }}.tilemap obj/{{ f }}.attrmap: rgbgfx_sprite obj/{{ f }}_sprite_wfg.png
  prefix = obj/{{ f }}
## endfor

## for f in inner_glob('art/*_bg.png')
build obj/{{ f }}.2bpp obj/{{ f }}.tilemap: rgbgfx_background art/{{ f }}_bg.png
  prefix = obj/{{ f }}
## endfor

## for f in inner_glob('art/*.png')
build obj/{{ f }}.2bpp: rgbgfx art/{{ f }}.png
## endfor

default obj/main.gb

# vi: set syntax=ninja ts=2 sts=2 sw=2 et:
